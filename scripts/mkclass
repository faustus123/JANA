#!/usr/bin/env python
#
# $Id:$
#

import sys
import os
import subprocess

#-----------------
# Usage
#-----------------
def Usage():

	print ""
	print "Usage:\n\t mkclass class"
	print ""
	print "Generate the C++ source and header files to implement a new"
	print "JANA class. "
	print ""

#-----------------
# PrintLicense
#-----------------
def PrintCopyright(f):

	# The following is an unofficial first draft sent to me by Amber on
	# 10/0/2017. I've put it here as a placehlder.
	#
	# Should copyright year be automatically set?
	# Should it be set with every commit?

	content = """//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// Jefferson Science Associates LLC Copyright Notice:  
// Copyright 251 2014 Jefferson Science Associates LLC All Rights Reserved. Redistribution
// and use in source and binary forms, with or without modification, are permitted as a
// licensed user provided that the following conditions are met:  
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer. 
// 2. Redistributions in binary form must reproduce the above copyright notice, this
//    list of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.  
// 3. The name of the author may not be used to endorse or promote products derived
//    from this software without specific prior written permission.  
// This material resulted from work developed under a United States Government Contract.
// The Government retains a paid-up, nonexclusive, irrevocable worldwide license in such
// copyrighted data to reproduce, distribute copies to the public, prepare derivative works,
// perform publicly and display publicly and to permit others to do so.   
// THIS SOFTWARE IS PROVIDED BY JEFFERSON SCIENCE ASSOCIATES LLC "AS IS" AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
// JEFFERSON SCIENCE ASSOCIATES, LLC OR THE U.S. GOVERNMENT BE LIABLE TO LICENSEE OR ANY
// THIRD PARTES FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
"""
	f.write(content)

#-----------------
# PrintFileHeader
#-----------------
def PrintFileHeader(f):
	# print a few lines at the very top of the file
	# n.b. the RCS style keyword replacement is done via
	# custom filters in git. See .gitattributes, .git_filters
	# and .git/config
	uname   = subprocess.check_output(['uname', '-nprs'])[:-1]
	thedate =  subprocess.check_output(['date'])[:-1]
	
	content = """//
//    File: """ + f.name + """
// Created: """ + thedate + """
// Creator: """ + os.environ["USER"] + """ (on """ + uname + """)
//
// ------ Last repository commit info -----
// [ Date ]
// [ Author ]
// [ Source ]
// [ Revision ]
"""
	f.write(content)

#-----------------
# PrintClassDef
#-----------------
def PrintClassDef(f):

	content = """

#ifndef _"""+classname+"""_h_
#define _"""+classname+"""_h_

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief class description.
///
/// Detailed class description.
//////////////////////////////////////////////////////////////////////////////////////////////////
class """+classname+"""{
	public:
		"""+classname+"""();
		virtual ~"""+classname+"""();
		
	protected:
	
	
	private:

};

#endif // _"""+classname+"""_h_

"""
	f.write(content)


#-----------------
# PrintClassMethods
#-----------------
def PrintClassMethods(f):
	global classname
	content = """
#include \""""+classname+""".h\"

//---------------------------------
// """+classname+"""    (Constructor)
//---------------------------------
"""+classname+"""::"""+classname+"""()
{

}

//---------------------------------
// ~"""+classname+"""    (Destructor)
//---------------------------------
"""+classname+"""::~"""+classname+"""()
{

}
"""
	f.write(content)
	


#----------------------------------------------------
if len(sys.argv) < 2 :
	Usage()
	sys.exit(1)

classname = sys.argv[1]

print "\nGenerating files for class %s..." % classname

hfile = fname = "%s.h" % classname
f = open(hfile, "w")
PrintFileHeader(f)
PrintCopyright(f)
PrintClassDef(f)
f.close()
print " - %s" % hfile

ccfile = fname = "%s.cc" % classname
f = open(ccfile, "w")
PrintFileHeader(f)
PrintCopyright(f)
PrintClassMethods(f)
f.close()
print " - %s" % ccfile

