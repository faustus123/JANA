#!/usr/bin/env python
#
# $Id:$
#

import sys
import os
import subprocess
import shutil

#-----------------
# Usage
#-----------------
def Usage():

	print ""
	print "Usage:\n\t mkclass class"
	print ""
	print "Generate the C++ source and header files to implement a new"
	print "JANA class. "
	print ""

#-----------------
# PrintLicense
#-----------------
def PrintCopyright(f):

	# The following is an unofficial first draft sent to me by Amber on
	# 10/0/2017. I've put it here as a placeholder.
	#
	# Should copyright year be automatically set?
	# Should it be set with every commit?

	content = """//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Jefferson Science Associates LLC Copyright Notice:
// Copyright 251 2014 Jefferson Science Associates LLC All Rights Reserved. Redistribution
// and use in source and binary forms, with or without modification, are permitted as a
// licensed user provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this
//    list of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products derived
//    from this software without specific prior written permission.
// This material resulted from work developed under a United States Government Contract.
// The Government retains a paid-up, nonexclusive, irrevocable worldwide license in such
// copyrighted data to reproduce, distribute copies to the public, prepare derivative works,
// perform publicly and display publicly and to permit others to do so.
// THIS SOFTWARE IS PROVIDED BY JEFFERSON SCIENCE ASSOCIATES LLC "AS IS" AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
// JEFFERSON SCIENCE ASSOCIATES, LLC OR THE U.S. GOVERNMENT BE LIABLE TO LICENSEE OR ANY
// THIRD PARTES FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
"""
	f.write(content)

#-----------------
# PrintFileHeader
#-----------------
def PrintFileHeader(f):
	# print a few lines at the very top of the file
	# n.b. the RCS style keyword replacement is done via
	# custom filters in git. See .gitattributes, .git_filters
	# and .git/config
	uname   = subprocess.check_output(['uname', '-nprs'])[:-1]
	thedate =  subprocess.check_output(['date'])[:-1]

	content = """//
//    File: """ + f.name + """
// Created: """ + thedate + """
// Creator: """ + os.environ["USER"] + """ (on """ + uname + """)
//
// ------ Last repository commit info -----
// [ Date ]
// [ Author ]
// [ Source ]
// [ Revision ]
"""
	f.write(content)

#-----------------
# PrintJEventProcessorClassDef
#-----------------
def PrintJEventProcessorClassDef(f):

	content = """

#ifndef _"""+classname+"""_h_
#define _"""+classname+"""_h_

#include <JANA/JEventProcessor.h>

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief class description.
///
/// Detailed class description.
//////////////////////////////////////////////////////////////////////////////////////////////////
class """+classname+""" : public JEventProcessor{
	public:
		"""+classname+"""();
		virtual ~"""+classname+"""();

		virtual void Init(void);
		virtual void Process(const std::shared_ptr<const JEvent>& aEvent);
		virtual void Finish(void);

	protected:


	private:

};

#endif // _"""+classname+"""_h_

"""
	f.write(content)


#-----------------
# PrintJEventProcessorClassMethods
#-----------------
def PrintJEventProcessorClassMethods(f):
	global classname
	content = """
#include \""""+classname+""".h\"

//---------------------------------
// """+classname+"""    (Constructor)
//---------------------------------
"""+classname+"""::"""+classname+"""()
{

}

//---------------------------------
// ~"""+classname+"""    (Destructor)
//---------------------------------
"""+classname+"""::~"""+classname+"""()
{

}

//------------------
// Init
//------------------
void """+classname+"""::Init(void)
{
	// This is called once at program startup.
}

//------------------
// Process
//------------------
void """+classname+"""::Process(const std::shared_ptr<const JEvent>& aEvent)
{
	// This is called for every event. Use of common resources like writing
	// to a file or filling a histogram should be mutex protected. Using
	// aEvent->Get<type>() to get reconstructed objects (and thereby activating the
	// reconstruction algorithm) should be done outside of any mutex lock
	// since multiple threads may call this method at the same time.
	// Here\'s an example:
	//
	// auto myTracks = aEvent->Get*<MyTrack>();
	//
	// lock_guard<mutex> lck( mymutex );
	// for( auto t : myTracks ){
	//  ... fill histograms or trees ...
	// }
}

//------------------
// Finish
//------------------
void """+classname+"""::Finish(void)
{
	// This is called when at the end of event processing
}
"""
	f.write(content)



#-----------------
# PrintJEventSourceClassDef
#-----------------
def PrintJEventSourceClassDef(f):

	content = """

#ifndef _"""+classname+"""_h_
#define _"""+classname+"""_h_

#include <JANA/JEventSource.h>
#include <JANA/JEventSourceGeneratorT.h>

#include "JEvent_"""+pluginname+""".h"

// This first bit is optional. It allows you to specify how likely this class
// is to read from a given source. Uncomment this if you want to return something
// other than the default of 0.01 which is OK for most implementations.
// template<> double JEventSourceGeneratorT<"""+classname+""">::CheckOpenable(std::string source) {
// 	if( source.find(".evio") != source.npos ) return 1.0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief class description.
///
/// Detailed class description.
//////////////////////////////////////////////////////////////////////////////////////////////////
class """+classname+""" : public JEventSource{
	public:
		                              """+classname+"""(std::string source_name, JApplication *app);
		                      virtual ~"""+classname+"""();
		
		           static std::string GetDescription(void){ return "My Event source"; }
		                         void Open(void);
		std::shared_ptr<const JEvent> GetEvent(void);
		                         bool GetObjects(const std::shared_ptr<const JEvent>& aEvent, JFactory* aFactory);
		// std::shared_ptr<JTaskBase> GetProcessEventTask(std::shared_ptr<const JEvent>&& aEvent);

};

#endif // _"""+classname+"""_h_

"""
	f.write(content)

#-----------------
# PrintJEventSourceClassMethods
#-----------------
def PrintJEventSourceClassMethods(f):
	global classname
	content = """
#include \""""+classname+""".h\"

//---------------------------------
// """+classname+"""    (Constructor)
//---------------------------------
"""+classname+"""::"""+classname+"""(std::string source_name, JApplication *app):JEventSource(source_name, app)
{
	// Don't open the file/stream here. Do it in the Open() method below.
	
	// Uncomment the line below and modify it to specify all of the data types this source
	// provides. The "MyHit" and "MyTrigger" are just examples of JObject types you might
	// define (they don't actually exist). The purpose of this is to create empty JFactory
	// objects that will serve as containers for the data the source produces.
	// Make sure that all types are listed as template arguments here!!
	// mFactoryGenerator = new JSourceFactoryGenerator<MyHit, MyTrigger>();
}

//---------------------------------
// ~"""+classname+"""    (Destructor)
//---------------------------------
"""+classname+"""::~"""+classname+"""()
{
	// Delete JFactoryGenerator if we created one
	if( mFactoryGenerator != nullptr ) delete mFactoryGenerator;

	// Close the file/stream here.
}

//------------------
// Open
//------------------
void """+classname+"""::Open(void)
{
	// Open the file/stream here. The name of the source will be in mName.
	// e.g.  auto ifs = new ifstream(mName);
}

//------------------
// GetEvent
//------------------
std::shared_ptr<const JEvent> """+classname+"""::GetEvent(void)
{
	// This should read an event from the input stream and make a
	// JEvent"""+pluginname+""" out of it.

	auto jevent = new JEvent_"""+pluginname+"""();
	// ... add event data to jevent ...
	return std::shared_ptr<JEvent>( (JEvent*)jevent );
}

//------------------
// GetObjects
//------------------
bool """+classname+"""::GetObjects(const std::shared_ptr<const JEvent>& aEvent, JFactory* aFactory)
{
	// This should create objects that are of the type aFactory holds using
	// data from aEvent. The objects should be transferred to aFactory which
	// serves simply as a container. Two possible paradigms are shown below
	// as OPTION 1 and OPTION 2
	
	auto name = aFactory->GetName();   // name of class aFactory holds
	auto tag  = aFactory->GetTag();    // aFactory tag
	
	// Most implementations will not fill tagged factories from event sources.
	// Your implementation should verify that the name, tag combo for this
	// aFactory is one it can provide objects for.
	if( !tag.empty() ) return false; // aFactory does not hold a type produced by this source
	
	// OPTION 1 ------------------------------------------------------------------
	// Check the type of data being requested is one we can provide. If so,
	// make the objects and hand them over to aFactory.
	if( name == "MyHit" ){
		// vector<MyHit*> hits;
		// ... create MyHit objects from data in aEvent and add them to hits vector
		// aFactory->Set( hits);
	}else if(name == "MyTrigger"){
		// ... similarly for additional data types this source provides
	}else{
		// we don't provide this type of object
		return false;
	}
	return true; // we do produce this type of object and they are now in aFactory
	
	// OPTION 2 ------------------------------------------------------------------
	// In many cases the data in aEvent may just be a big buffer that must be
	// parsed to extract all objects. In this case, it is more efficient to
	// parse it once and produce all objects from a single pass. These should
	// be placed in their respective JFactory objects, of which aFactory is
	// just one. Pointers to other factories in the set can be obtained via
	// the aEvent pointer. Here's an example:
	//
	// vector<MyHit*> hits;
	// vector<MyTrigger*> trigs;
	// ...
	// ...  parse buffer, filling hits,trigs,... etc. vectors
	// ...
	// JFactory *myHitFac  = aEvent->GetFactory<MyHit>();
	// JFactory *myTrigFac = aEvent->GetFactory<MyTrigger>();
	// ...
	//  myHitFac->Set( hits );
	//  myTrigFac->Set( trigs );
	//
	// This last part is trickier since we need to return "true" only if the
	// type of object in aFactory is one we produced. Even though we may have
	// produced many objects and filled many factories, the return value should
	// refer only to whether aFactory has been filled.
	// return name=="MyHit" || name=="MyTrigger";
}

// The following method is optional in case you need to implement a more 
// complicated scheme. If not defined, a default JTask will be created for
// each event that simply runs all event processors on it. (This is
// probably what you want so feel free to delete this section.)
//
// An example of when you would implement this method is if you wanted
// to split the parsing of the input data  through multiple stages.
// For example, the first stage might simply split the larger buffer
// which contains many events into smaller buffers containing single
// events (e.g. disentangling). The JEventProcessor tasks should only
// be attached to single events rather than blocks so it makes sense
// to make the parsing of the blocks a different flavor of JTask.
// See the documentation for more details.
//------------------
// GetProcessEventTask
//------------------
// std::shared_ptr<JTaskBase> """+classname+"""::GetProcessEventTask(std::shared_ptr<const JEvent>&& aEvent)
//{
// 
//}
"""
	f.write(content)


#-----------------
# PrintJEventClassDef
#-----------------
def PrintJEventClassDef(f):

	content = """

#ifndef _"""+classname+"""_h_
#define _"""+classname+"""_h_

#include <JANA/JEvent.h>

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief class description.
///
/// Detailed class description.
//////////////////////////////////////////////////////////////////////////////////////////////////
class """+classname+""" : public JEvent{
	public:
		        """+classname+"""(){}
		virtual ~"""+classname+"""(){}

		// This represents an event read from a JEventSource_"""+pluginname+""" object
		// Add members that can hold the data in whatever form is easy to access
		// in the JEventSource_"""+pluginname+"""::GetObjects method
};

#endif // _"""+classname+"""_h_

"""
	f.write(content)


#-----------------
# PrintPluginInit
#-----------------
def PrintPluginInit(f, classes_to_add):
	global classname
	content = """
extern "C"{
void InitPlugin(JApplication *app){
	InitJANAPlugin(app);

"""
	for classname in classes_to_add: content += '	app->Add(new '+classname+'());\n'
	
	content +="""
}
} // "C"

"""
	f.write(content)

#------------------------------------------------------------------------------------
# MAIN 

if len(sys.argv) < 2 :
	Usage()
	sys.exit(1)

# Defaults
ADD_COPYRIGHT = True
ADD_JEVENTPROCESSOR = True
ADD_JEVENTSOURCE = False

# Parse command line arguments
for arg in sys.argv[1:]:
	if   arg == '-l':   ADD_COPYRIGHT = False
	elif arg == '-p':   ADD_JEVENTPROCESSOR = False
	elif arg == '-s':   ADD_JEVENTSOURCE = True
	elif not arg.startswith('-'): pluginname = arg

if pluginname == None:
	Usage()
	print 'You must supply a name for the plugin!'
	sys.exit(1)

if os.path.exists( pluginname ):
	print '\nA directory named "' + pluginname + '" already exists! Please remove it or try another name.\n'
	sys.exit(2)

print "\nGenerating files for plugin %s..." % pluginname

# Make directory to hold code
os.mkdir( pluginname )

headers = []
classes_to_add = []

# optionally add JEventProcessor
if ADD_JEVENTPROCESSOR:
	classname = 'JEventProcessor_' + pluginname
	classes_to_add.append(classname)

	# Create C++ Header File
	hfile = pluginname + '/' + classname + '.h'
	f = open(hfile, "w")
	PrintFileHeader(f)
	if ADD_COPYRIGHT : PrintCopyright(f)
	PrintJEventProcessorClassDef(f)
	f.close()
	print " - %s" % hfile
	headers.append( classname + '.h' )
	
	# Create C++ Implementation file
	ccfile =  pluginname + '/' + classname + '.cc'
	f = open(ccfile, "w")
	PrintFileHeader(f)
	if ADD_COPYRIGHT : PrintCopyright(f)
	PrintJEventProcessorClassMethods(f)
	f.close()
	print " - %s" % ccfile

# optionally add JEventSource
if ADD_JEVENTSOURCE:
	classname = 'JEventSource_' + pluginname
	classes_to_add.append('JEventSourceGeneratorT<'+classname+'>')

	# Create C++ Header File
	hfile = pluginname + '/' + classname + '.h'
	f = open(hfile, "w")
	PrintFileHeader(f)
	if ADD_COPYRIGHT : PrintCopyright(f)
	PrintJEventSourceClassDef(f)
	f.close()
	print " - %s" % hfile
	headers.append( classname + '.h' )
	
	# Create C++ Implementation file
	ccfile =  pluginname + '/' + classname + '.cc'
	f = open(ccfile, "w")
	PrintFileHeader(f)
	if ADD_COPYRIGHT : PrintCopyright(f)
	PrintJEventSourceClassMethods(f)
	f.close()
	print " - %s" % ccfile
	
	# Create C++ Header File for JEventXXX
	classname = 'JEvent_' + pluginname
	hfile = pluginname + '/' + classname + '.h'
	f = open(hfile, "w")
	PrintFileHeader(f)
	if ADD_COPYRIGHT : PrintCopyright(f)
	PrintJEventClassDef(f)
	f.close()
	print " - %s" % hfile

# Add "main" file for plugin
ccfile =  pluginname + '/' + pluginname + '.cc'
f = open(ccfile, "w")
PrintFileHeader(f)
if ADD_COPYRIGHT : PrintCopyright(f)
f.write('\n\n')
for h in headers: f.write('#include "' + h + '"\n')
f.write('\n\n')
PrintPluginInit(f, classes_to_add)
f.close()
print " - %s" % ccfile


# Copy SConstruct file
JANA_HOME = os.getenv( 'JANA_HOME' )
if JANA_HOME != None:
	src = JANA_HOME + '/src/../SBMS/SConstruct.plug_in'
	if os.path.exists( src ):
		shutil.copyfile( src, pluginname+'/SConstruct' )
		print " - SConstruct"

